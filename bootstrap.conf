# bootstrap.conf
#
# Copyright (c) 2021-2024 Reuben Thomas <rrt@sc3d.org>
#
# This file is part of mmv.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <https://www.gnu.org/licenses/>.

## -------------- ##
## Configuration. ##
## -------------- ##

# File that should exist relative to the top directory of a checked out
# hierarchy, but not in a distribution tarball.
checkout_only_file=.gitignore

# List of programs, minimum versions, and software urls required to
# bootstrap, maintain and release.

# Build prerequisites
buildreq='
        git        1.5.5   https://git-scm.com
        gpg        1.4.11  https://www.gnupg.org
        gengetopt  2.23    https://www.gnu.org/s/gengetopt
        help2man   1.29    https://www.gnu.org/s/help2man
        perl       5.5     https://perl.com
        tar        -       https://www.gnu.org/s/tar
'

# Non-default gnulib directory options.
local_gl_path=gl:gl-mod/bootstrap
gnulib_git_submodules=gl-mod/bootstrap
gnulib_clone_since=2024-07-06

# Additional gnulib-tool options to use.
gnulib_tool_options='
        --no-libtool
        --no-changelog
'

# gnulib modules used by this package.
gnulib_modules='
	binary-io
	bootstrap
	close
        dirname
	fprintf-posix
	getopt-gnu
	link
	lseek
	manywarnings
	open
	pathmax
	progname
	read
	rename
	sprintf-posix
	stat
	stdbool
	symlink
	unlink
	write
	xalloc
'

# Extra gnulib files that are not in modules, which override files of
# the same name installed by other bootstrap tools.
gnulib_non_module_files="$gnulib_non_module_files"'
'


## -------------------- ##
## Resource management. ##
## -------------------- ##

# require_source_base
# -------------------
# Ensure any source_base setting in this file or `gnulib-cache.m4`
# is used for $source_base.  If both are the empty string before
# call this function, $source_base will still be the empty string
# afterwards.  Use ${source_base-lib} if you are looking at files
# inside the gnulib directory.
require_source_base=mmv_require_source_base
mmv_require_source_base ()
{
    $debug_cmd

    test -n "$source_base" || {
      $require_gnulib_cache
      $require_macro_dir

      func_extract_trace "gl_SOURCE_BASE" "$gnulib_cache"
      source_base="$func_extract_trace_result"

      test -n "$source_base" && func_verbose "source_base='$source_base'"
    }

    require_source_base=:
}


## --------------- ##
## Hook functions. ##
## --------------- ##

# mmv_ignore_gnulib_ignore
# ----------------------------
# gnulib-tool updates m4/.gitignore and lib/.gitignore, and keeping
# generated files under version control does not make sense.  Since
# lib is entirely ignored, we only need to prepopulate the m4 ignore
# files with generated files not tracked by gnulib-tool.
mmv_ignore_gnulib_ignore ()
{
    $debug_cmd

    $require_macro_dir

    if test -f "$macro_dir/.gitignore" ; then
      :
    else
      func_verbose "creating initial \`$macro_dir/.gitignore'"
      cat > $macro_dir/.gitignore <<\EOF
# files created by bootstrap, but that gnulib doesn't track
*~
/.gitignore
/gnulib-comp.m4
EOF
    fi
}
func_add_hook func_prep mmv_ignore_gnulib_ignore


# Local variables:
# mode: shell-script
# sh-indentation: 2
# End:
